from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InputFile
from aiogram.utils.executor import start_webhook
import logging
import os
import aiohttp

API_TOKEN = os.getenv("API_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(KeyboardButton("üìò –û–±—É—á–µ–Ω–∏–µ"), KeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø"))
main_menu.add(KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

user_steps = {}

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ WB –®–∫–æ–ª—É.\n\n–ó–¥–µ—Å—å —Ç—ã –ø—Ä–æ–π–¥—ë—à—å –ø–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–æ —Ç–æ—Ä–≥–æ–≤–ª–µ –Ω–∞ Wildberries.", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text == "üìò –û–±—É—á–µ–Ω–∏–µ")
async def course_access(message: types.Message):
    user_steps[message.from_user.id] = 1
    await send_lesson(message)

async def send_lesson(message):
    step = user_steps.get(message.from_user.id, 1)
    if step == 1:
        photo = InputFile("modul1.png")
        await message.answer_photo(photo, caption="–ú–æ–¥—É–ª—å 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü —á–µ—Ä–µ–∑ –¢-–ë–∞–Ω–∫.\n\n–ó–∞–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç https://www.tinkoff.ru/business/ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É.\n\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫—É—Ä—å–µ—Ä –ø—Ä–∏–µ–¥–µ—Ç –∫ –≤–∞–º –≤ –ª—é–±–æ–π —Ä–µ–≥–∏–æ–Ω –†–§.")
        await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ', —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
    elif step == 2:
        photo = InputFile("modul2.png")
        await message.answer_photo(photo, caption="–ú–æ–¥—É–ª—å 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –õ–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É Wildberries.\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ seller.wildberries.ru –∏ —Å–æ–∑–¥–∞–π—Ç–µ —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å —Å –ò–ü.")
        await message.answer("–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–ª–µ–¥—É—é—â–∏–µ –º–æ–¥—É–ª–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã!")

@dp.message_handler(lambda message: message.text.lower() == "–¥–∞–ª–µ–µ")
async def next_step(message: types.Message):
    user_id = message.from_user.id
    user_steps[user_id] = user_steps.get(user_id, 1) + 1
    await send_lesson(message)

@dp.message_handler(lambda message: message.text == "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø")
async def buy_access(message: types.Message):
    await message.answer("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã üí≥\n(—Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)")

@dp.message_handler(lambda message: message.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_info(message: types.Message):
    await message.answer("–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏ —Å—é–¥–∞: @your_support")

async def on_startup(dp):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/bot{API_TOKEN}/getWebhookInfo") as resp:
            data = await resp.json()
            if not data['result']['url']:
                await bot.set_webhook(WEBHOOK_URL)
                print("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
    )

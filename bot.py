from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
import logging
import os
import aiohttp
import asyncio

API_TOKEN = os.getenv("API_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{RENDER_EXTERNAL_URL}{WEBHOOK_PATH}"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üìò –û –∫—É—Ä—Å–µ"), KeyboardButton("üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"))
menu.add(KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —á–∞—Å—Ç—å 1 (3990 ‚ÇΩ)"), KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å –≤–µ—Å—å –∫—É—Ä—Å (7990 ‚ÇΩ)"))
menu.add(KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∫—É—Ä—Å –ê—Ä–∫–∞–¥–∏—è –ø–æ ChatGPT!\n\nüîπ –û–±—É—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\nüîπ GPT-–∞–≥–µ–Ω—Ç—ã, –ø—Ä–æ–º—Ç—ã, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å üëá"
    await message.answer(text, reply_markup=menu)

@dp.message_handler(lambda msg: msg.text == "üìò –û –∫—É—Ä—Å–µ")
async def course_info(message: types.Message):
    text = ("üí° –ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 2 —á–∞—Å—Ç–µ–π:\n\n"
            "1Ô∏è‚É£ *–ë–∞–∑–æ–≤–∞—è* ‚Äî –æ—Å–Ω–æ–≤—ã ChatGPT, –≥—Ä–∞–º–æ—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–º—Ç–∞–º–∏\n"
            "2Ô∏è‚É£ *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è* ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ GPT-–∞–≥–µ–Ω—Ç–æ–≤, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, API\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –ª—é–±—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
    await message.answer(text, parse_mode='Markdown')

@dp.message_handler(lambda msg: msg.text == "üéÅ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ")
async def trial(message: types.Message):
    await message.answer("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏.")

@dp.message_handler(lambda msg: "–ö—É–ø–∏—Ç—å" in msg.text)
async def buy(message: types.Message):
    await message.answer("üí≥ –û–ø–ª–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.")

@dp.message_handler(lambda msg: msg.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üì© –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @your_support")

async def ping_self():
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(RENDER_EXTERNAL_URL) as resp:
                    logging.info(f"Ping status: {resp.status}")
            except Exception as e:
                logging.warning(f"Ping error: {e}")
            await asyncio.sleep(300)

async def on_startup(dp):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/bot{API_TOKEN}/getWebhookInfo") as resp:
            data = await resp.json()
            if not data['result']['url']:
                await bot.set_webhook(WEBHOOK_URL)
                logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    asyncio.create_task(ping_self())

async def on_shutdown(dp):
    await bot.delete_webhook()

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
    )

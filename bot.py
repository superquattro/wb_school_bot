from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
import logging
import os
import aiohttp
import asyncio
from datetime import datetime

API_TOKEN = os.getenv("API_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = RENDER_EXTERNAL_URL + WEBHOOK_PATH

logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a",
                    format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"), KeyboardButton("üìò –û –∫—É—Ä—Å–µ"))
menu.add(KeyboardButton("üéÅ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫"), KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —á–∞—Å—Ç—å 1 (3990 ‚ÇΩ)"))
menu.add(KeyboardButton("üíº –ö—É–ø–∏—Ç—å –≤–µ—Å—å –∫—É—Ä—Å (7990 ‚ÇΩ)"), KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-–∫—É—Ä—Å –ê—Ä–∫–∞–¥–∏—è –ø–æ ChatGPT! üî•

–≠—Ç–æ—Ç –∫—É—Ä—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò, –∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –º–æ—â–Ω–æ ‚Äî –¥–ª—è —Ä–∞–±–æ—Ç—ã, —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á –∏ –º–Ω–æ–≥–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ.

üîπ –ß—Ç–æ —Ç—ã –Ω–∞–π–¥—ë—à—å –≤–Ω—É—Ç—Ä–∏:
‚Äì –ü–æ—à–∞–≥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–µ —Å ChatGPT
‚Äì –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–æ–º—Ç–æ–≤, —à–∞–±–ª–æ–Ω—ã, –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è
‚Äì –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ GPT-–∞–≥–µ–Ω—Ç–∞ –ø–æ–¥ –∑–∞–¥–∞—á–∏ –±–∏–∑–Ω–µ—Å–∞
‚Äì –ö–∞–∫ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ —á–µ—Ä–µ–∑ GPT
‚Äì –ò –¥–∞–∂–µ –±–æ–ª—å—à–µ‚Ä¶

–ö—É—Ä—Å —Ä–∞–∑–±–∏—Ç –Ω–∞ 2 —á–∞—Å—Ç–∏:
1Ô∏è‚É£ *–ë–∞–∑–æ–≤–∞—è* ‚Äî –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ (–ø—Ä–æ–º—Ç—ã, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –ª–æ–≥–∏–∫–∞)
2Ô∏è‚É£ *–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è* ‚Äî –∞–≥–µ–Ω—Ç—ã, API, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

üí¨ –¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Ç–µ–±—è —Ç–µ–º–ø–µ. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ –æ–±—É—á–µ–Ω–∏–µ. –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω–æ, —á—Ç–æ–±—ã —Ç—ã –º–æ–≥ —É–±–µ–¥–∏—Ç—å—Å—è, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ –ø–æ–ª–µ–∑–Ω–æ.

–ì–æ—Ç–æ–≤? –¢–æ–≥–¥–∞ –ø–æ–µ—Ö–∞–ª–∏! üëá
""", reply_markup=menu, parse_mode='Markdown')

@dp.message_handler(lambda msg: msg.text == "üìò –û –∫—É—Ä—Å–µ")
async def course_info(message: types.Message):
    text = (
        "üß† *–û –∫—É—Ä—Å–µ:*\n"
        "–≠—Ç–æ—Ç –∫—É—Ä—Å –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ ¬´—Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å ChatGPT¬ª, –∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ –±–∏–∑–Ω–µ—Å–∞.\n\n"
        "üì¶ –°–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π:\n"
        "1Ô∏è‚É£ –û—Å–Ω–æ–≤—ã ChatGPT ‚Äî –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç—ã, –ø–æ–ª—É—á–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ —Ä–∞–±–æ—Ç–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ\n"
        "2Ô∏è‚É£ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —á–∞—Å—Ç—å ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ GPT-–∞–≥–µ–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è, API-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n"
        "–ö—É—Ä—Å –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–æ–≤–∏—á–∫–∞–º –∏ —Ç–µ–º, –∫—Ç–æ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ChatGPT, –Ω–æ —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ."
    )
    await message.answer(text, parse_mode='Markdown')

@dp.message_handler(lambda msg: msg.text == "üéÅ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫")
async def trial(message: types.Message):
    await message.answer("üéÅ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ –ø–æ—è–≤–∏—Ç—Å—è —Å–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ!\n–ú—ã —É–∂–µ –≥–æ—Ç–æ–≤–∏–º –µ–≥–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–æ—Ç–∞.")

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
async def start_course(message: types.Message):
    await message.answer("üë®‚Äçüè´ –û–±—É—á–µ–Ω–∏–µ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º–æ–¥—É–ª–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, —Ç—ã –ø–æ–ª—É—á–∏—à—å –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø –ø–µ—Ä–≤—ã–º!")

@dp.message_handler(lambda msg: "–ö—É–ø–∏—Ç—å" in msg.text)
async def buy(message: types.Message):
    await message.answer("üí≥ –ü–æ–∫—É–ø–∫–∞ –ø–æ–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.\n–°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –∫—É–ø–∏—Ç—å –∫—É—Ä—Å –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")

@dp.message_handler(lambda msg: msg.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üì© –ù–∞–ø–∏—à–∏ –Ω–∞–º: @your_support")

async def ping_self():
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(RENDER_EXTERNAL_URL) as resp:
                    status = f"Ping status: {resp.status} at {datetime.now()}"
                    logging.info(status)
            except Exception as e:
                logging.warning(f"Ping error: {e}")
            await asyncio.sleep(300)

async def on_startup(dp):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/bot{API_TOKEN}/getWebhookInfo") as resp:
            data = await resp.json()
            if not data['result']['url']:
                await bot.set_webhook(WEBHOOK_URL)
                logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    asyncio.create_task(ping_self())

async def on_shutdown(dp):
    await bot.delete_webhook()
    logging.info("Webhook –æ—Ç–∫–ª—é—á—ë–Ω –∏ –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
    )

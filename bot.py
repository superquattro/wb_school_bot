from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.executor import start_webhook
import logging
import os
import aiohttp
import asyncio
from datetime import datetime

API_TOKEN = os.getenv("API_TOKEN")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = RENDER_EXTERNAL_URL + WEBHOOK_PATH

logging.basicConfig(level=logging.INFO, filename="bot.log", filemode="a",
                    format="%(asctime)s - %(levelname)s - %(message)s")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

menu = ReplyKeyboardMarkup(resize_keyboard=True)
menu.add(KeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ"), KeyboardButton("üìò –û –∫—É—Ä—Å–µ"))
menu.add(KeyboardButton("üéÅ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫"), KeyboardButton("üí≥ –ö—É–ø–∏—Ç—å —á–∞—Å—Ç—å 1 (3990 ‚ÇΩ)"))
menu.add(KeyboardButton("üíº –ö—É–ø–∏—Ç—å –≤–µ—Å—å –∫—É—Ä—Å (7990 ‚ÇΩ)"), KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("–¢—ã —Å–µ–π—á–∞—Å –Ω–∞ —Å–∞–º–æ–º –∫—Ä—É—Ç–æ–º –∫—É—Ä—Å–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—É—á–∏—Ç —Ç–µ–±—è GPT-—á–∞—Ç—É. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.", reply_markup=menu)

@dp.message_handler(lambda msg: msg.text == "üìò –û –∫—É—Ä—Å–µ")
async def course_info(message: types.Message):
    await message.answer("""üß† –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫—É—Ä—Å. –≠—Ç–æ —Ç–≤–æ–π –≤—Ö–æ–¥ –≤ —ç–ø–æ—Ö—É ChatGPT.
‚ùì–¢—ã —Å–ª—ã—à–∞–ª –ø—Ä–æ ChatGPT, –Ω–æ –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–Ω–∏–º–∞–µ—à—å, –∫–∞–∫ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å?
... (–≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤—ã—à–µ)
‚ùóÔ∏è–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë –≥–æ–¥.
–ê –º–æ–∂–µ—à—å —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π —Å–∫–∞–∑–∞—Ç—å:
‚Äú–Ø —Ç–µ–ø–µ—Ä—å –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ò–ò –≤ –∂–∏–∑–Ω–∏ –∏ –≤ —Ä–∞–±–æ—Ç–µ. –ò —É–º–µ—é —ç—Ç–æ –¥–µ–ª–∞—Ç—å.‚Äù""", parse_mode="Markdown")

@dp.message_handler(lambda msg: msg.text == "üéÅ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫")
async def trial(message: types.Message):
    await message.answer("üéÅ –ü—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è!")

@dp.message_handler(lambda msg: msg.text == "üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
async def start_course(message: types.Message):
    await message.answer("üß† –û–±—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!")

@dp.message_handler(lambda msg: "–ö—É–ø–∏—Ç—å" in msg.text)
async def buy(message: types.Message):
    await message.answer("üí≥ –û–ø–ª–∞—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

@dp.message_handler(lambda msg: msg.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    await message.answer("üì© –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @your_support")

async def ping_self():
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(RENDER_EXTERNAL_URL) as resp:
                    logging.info(f"Ping status: {resp.status} at {datetime.now()}")
            except Exception as e:
                logging.warning(f"Ping error: {e}")
            await asyncio.sleep(300)

async def on_startup(dp):
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://api.telegram.org/bot{API_TOKEN}/getWebhookInfo") as resp:
            data = await resp.json()
            if not data['result']['url']:
                await bot.set_webhook(WEBHOOK_URL)
                logging.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
    asyncio.create_task(ping_self())

async def on_shutdown(dp):
    await bot.delete_webhook()
    logging.info("Webhook –æ—Ç–∫–ª—é—á—ë–Ω.")

if __name__ == '__main__':
    start_webhook(
        dispatcher=dp,
        webhook_path=WEBHOOK_PATH,
        on_startup=on_startup,
        on_shutdown=on_shutdown,
        skip_updates=True,
        host="0.0.0.0",
        port=int(os.environ.get("PORT", 5000)),
    )
